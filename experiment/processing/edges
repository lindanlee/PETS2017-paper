#!/usr/bin/env python

"""
This script generates a CSV with every edge/transition in the experiment.
"""

import collections
import csv
import datetime
import getopt
import os
import os.path
import re
import sys

import inst

# src and dst are vertices; i.e. pages or states in the interface.
# via is a string indicating an action that moved you from src to dst.
# src and dst can be the same.
Edge = collections.namedtuple('Edge', ['exec_id', 'timestamp', 'src', 'dst', 'event_type', 'event_target', 'event_value'])

def is_event_wanted(event):
    if event["type"] in ("mouseover", "mouseout"):
        return False
    if event["type"] in ("popupshown", "popuphidden"):
        return False
    if event["type"] in ("pagehide", "pageadvanced", "pagerewound"):
        return False
    if event["type"] in ("click", "command") and event.get("target_tagname") in ("menuitem", "wizard", None):
        return False
    if event["type"] == "command" and event["target_tagname"] == "button":
        return False
    return True

def get_id(event):
    """
    Canonicalizes event target
    """
    if event["type"] == "start":
        return "starting"
    elif event["type"] in ("mouseover", "mouseout"):
        return event["value"]
    else:
        return event["target_id"]

def parse_inst_log(f):
    records = inst.parse_records(f)
    # For now, assert that we have exactly one "start" event, in the first
    # record.
    assert len(records) > 0
    assert records[0].event["type"] == "start"
    #for record in records[1:]:
    #    assert record.event["type"] != "start"

    records = [record for record in records if is_event_wanted(record.event)]

    # state is a stack keeping track of what state we're looking at. In most
    # cases, transitioning to a new state just replaces the current state, so
    # stack functionality isn't needed. But in the OLD interface, the progress
    # bar is a modal dialog, and when you cancel it you have to remember where
    # you came from.
    #
    # The stack grows and shrinks at index 0. state[0] always represents the
    # current state.
    state = ["not_running"]
    edges = []

    # Which screen are loaded (could include the main configuration screen and
    # the progress bar dialog). When all are unloaded, we enter the not_running
    # state.
    loaded = set()

    for r in records:
        if r.event["type"] == "start":
            if state[0] != "not_running":
                # Somehow the program stopped running without us noticing it.
                # Insert an artificial "quit" edge just before this "start" one.
                # We don't know what time to use; just use the current time.
                e = Edge(edges[-1].exec_id, r.date, state[0], "not_running", "quit", "", "")
                edges.append(e)
                state[0] = "not_running"
            e = Edge(r.exec_id, r.date, state[0], "starting", r.event["type"], get_id(r.event), r.event.get("value", ""))
            edges.append(e)
            state[0] = "starting"

        if r.event["type"] == "load":
            loaded.add(get_id(r.event))
            if r.event["target_id"] == "progress_bar":
                # Push progress bar on the state stack.
                state.insert(0, get_id(r.event))
                # Change previous edge to point to this new state.
                edges[-1] = edges[-1]._replace(dst=state[0])
        elif r.event["type"] == "unload":
            loaded.remove(get_id(r.event))
            if r.event["target_id"] == "configuration" or not loaded:
                # We switch to not_running whenever unloading "configuration" or
                # whenever the set of loaded screen is empty. It seems that when
                # both "configuration" and "progress_bar" are loaded, and then
                # "configuration" gets an unload event, there's no unload event
                # for "progress_bar". But it's also possible for "progress_bar"
                # to be the only thing loaded.
                e = Edge(r.exec_id, r.date, state[0], "not_running", r.event["type"], get_id(r.event), r.event.get("value", ""))
                edges.append(e)
                state[0] = "not_running"
                loaded = set()
        elif r.event["type"] in ("start", "pageshow"):
            state[0] = get_id(r.event)
            # Change previous edge to point to this new state.
            edges[-1] = edges[-1]._replace(dst=state[0])
        elif r.event["type"] == "dialogcancel" and r.event["target_id"] == "TorProgress":
            e = Edge(r.exec_id, r.date, state[0], state[1], r.event["type"], get_id(r.event), r.event.get("value", ""))
            edges.append(e)
            # Pop off the progress bar state.
            state.pop(0)
        else:
            e = Edge(r.exec_id, r.date, state[0], state[0], r.event["type"], get_id(r.event), r.event.get("value", ""))
            edges.append(e)

    return edges

log_filename = re.compile(r'(?P<env>E\d)-(?P<version>\w\w\w)-(?P<seat>X\d\d)-(?P<runid>\d{8}-\d{6})-inst.log$')

def main():
    _, filenames = getopt.gnu_getopt(sys.argv[1:], "")

    csvw = csv.DictWriter(sys.stdout, fieldnames=("seat", "runid", "exec_count", "sequence", "time_from_start", "src", "dst", "event_type", "event_target", "event_value"))
    csvw.writeheader()

    for filename in filenames:
        match = log_filename.match(os.path.basename(filename))
        if match is None:
            raise ValueError("cannot parse filename: {}".format(filename))

        with open(filename) as file:
            edges = parse_inst_log(file)

        if len(edges) > 0:
            start_date = edges[0].timestamp
        current_exec_id = None
        exec_count = 0
        sequence = 0
        for edge in edges:
            if edge.exec_id != current_exec_id:
                exec_count += 1
                current_exec_id = edge.exec_id
            sequence += 1
            time_from_start = (edge.timestamp - start_date).total_seconds()
            fields = {
                "seat": match.group("seat"),
                "runid": match.group("runid"),
                "exec_count": exec_count,
                "sequence": sequence,
                "time_from_start": "%.1f" % time_from_start,
                "src": edge.src,
                "dst": edge.dst,
                "event_type": edge.event_type,
                "event_target": edge.event_target,
                "event_value": edge.event_value,
            }
            csvw.writerow(fields)

if __name__ == '__main__':
    main()
